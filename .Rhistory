#' @param col_groups
#' @param ion_count
#' @param iso_abun
#' @param save_loc
#' @param group_length
#' @param total_length
#' @param xtick
#' @param offset
#' @param removed_cols
#' @param offset
#'
#' @return
#' @export
#'
#' @examples
plot_multi_abundance <- function(col_groups, ion_count, iso_abun, folder_name,
group_length = 8, total_length = 24,
xtick = NA,
plot_offset = NA){
# offsets for the first two are 37, 38. plot_offset = list(c(37, 38), c(37, 38))
for(i in 1:col_groups){
group_index <- (2:(total_length + 1)) + (i - 1)*total_length
ion_count_sub <- ion_count[c(1, group_index)]
iso_abun_sub <- iso_abun[c(1, group_index, ncol(iso_abun))]
offsets <- unlist(plot_offset[i])
offsets <- iso_abun[,offsets, drop = T]
save_loc <- paste0(folder_name, as.character(i), "/")
plot_abundance(ion_count_sub, iso_abun_sub, save_loc = save_loc, group_length,
total_length, offset = offsets)
}
}
#' Plot the stacked barplot representing the abundance
#'
#' @param ion_count ion count data frame
#' @param iso_abun mass isotopomer data frame. First column contains all Fragment
#' names
#' @param group_length Number of experiments in each repetition. First column contains
#' names of ions
#' @param total_length Number of all experiments
#' @param xtick Name of X variables
#' @param offset Can be index or vector of values. If index, then
#' @return plots stored in output folder
#' @export
#'
#' @examples
plot_abundance <- function(ion_count, iso_abun, save_loc,
group_length = 8, total_length = 24,
xtick = NA,
offset = NA,
removed_cols = NA){
ions <- iso_abun$Ion
# Add identifying columns
ion_count$Fragment_type <- split_string_take_first(ion_count$Fragment, by = " ")
iso_abun$Ion_type <- split_string_take_first(iso_abun$Ion, by = " ")
iso_abun$Ion_type <- unlist(lapply(iso_abun$Ion_type,
function(x) substr(x, 1, nchar(x)-3)))
ion_type <- iso_abun$Ion_type
# Multiply ion_count and iso_abun dfs
iso_abun <- multiply_dfs(ion_count, iso_abun)
# offset <- multiply_dfs(ion_count, iso_abun)
# Aggregate dfs
aggr_result <- aggregate_dfs(iso_abun, group_length, total_length, NA,
removed_cols) # TODO: subtracting offset is set as NA
aggr_mean <- aggr_result$aggr_mean
aggr_sem <- aggr_result$aggr_sem
# Plot
na_index <- which(is.na(aggr_mean$V1))
start_index <- c(1, (na_index + 1))
end_index <- c((na_index - 1), nrow(aggr_mean))
default_palette <- RColorBrewer::brewer.pal(n = 7, name = 'Pastel1')
default_palette <- c("#e6e6e6", default_palette)
default_palette <- c(default_palette, rep("#7b797d", 12))
for(k in 1:length(start_index)){
# Sub-setting dataframe
k_start <- start_index[k]
k_end <- end_index[k]
df_iso_mean <- aggr_mean[k_start:k_end, 1:ncol(aggr_mean)]
df_iso_sem <- aggr_sem[k_start:k_end, 1:ncol(aggr_sem)]
# df_offset <- offset[k_start:k_end, 1:ncol(offset)]
# print(df_offset)
# Create group name: M0, M1, ...
m_size <- k_end - k_start + 1
group_name <- as.character(0:(m_size - 1)) # Starts with M0
group_name <- unlist(lapply(group_name, function (x) paste0("M+", x)))
color_used <- rev(default_palette[1:m_size])
# Reshape/flatten dataframes
df_iso_mean <- reshape2::melt(df_iso_mean) %>%
dplyr::mutate(Group = rep(group_name, group_length))
df_iso_sem <- reshape2::melt(df_iso_sem) %>%
dplyr::mutate(Group = rep(group_name, group_length))
# df_offset <- reshape2::melt(df_offset) %>%
#   dplyr::mutate(Group = rep(group_name, ncol(df_offset)))
#
# print(df_offset)
# Summarize data into dataframe to plot for
df_to_plot <- df_iso_mean
df_to_plot <- df_to_plot %>%
dplyr::mutate(sd = df_iso_sem$value)%>%
dplyr::group_by(variable) %>%
dplyr::mutate(Group = factor(Group, levels = rev(group_name))) %>%
dplyr::mutate(value = replace(value, value < 0, 0)) %>%
dplyr::mutate(sd_pos = cumsum(value))
# Don't plot error bars for negative values
df_to_plot$sd[which(df_to_plot$value == 0)] <- NA
df_to_plot$sd_pos[which(df_to_plot$value == 0)] <- NA
# df_offset <- df_offset %>%
#   dplyr::mutate(sd = NA) %>%
#   dplyr::mutate(sd_pos = NA)
# df_to_plot <- rbind(df_to_plot, df_offset)
# print(df_to_plot)
# xtick
if(!any(is.na(xtick))){
print("ITS NA")
current_varnames <- unlist(lapply(1:group_length, function(x) paste0("V", as.character(x))))
new_varnames <- set_names(as.list(xtick), current_varnames)
df_to_plot$variable <- unlist(lapply(df_to_plot$variable, function(x) new_varnames[x]))
}
# print(df_to_plot)
df_to_plot$variable <- factor(df_to_plot$variable, levels = xtick)
# Plot
p <- ggplot2::ggplot(df_to_plot,
ggplot2::aes(x = variable, y = value, fill = Group))+
ggplot2::geom_bar(position="stack", stat = "identity") +
ggplot2::geom_errorbar(ggplot2::aes(ymin = sd_pos - sd, ymax = sd_pos + sd,
width = 0.3))+
ggplot2::theme_bw()+
ggplot2::ylab("Ion percentage")+
# ggplot2::ggtitle(ion_type[start_index[k]])+
ggplot2::scale_fill_manual(values = color_used)+
ggplot2::labs(title = ion_type[start_index[k]])+
ggplot2::theme(plot.title = ggplot2::element_text(size = 30),
axis.text.x = ggplot2::element_text(angle = 45, hjust=1))
ggplot2::ggsave(paste0("output/", save_loc, ion_type[start_index[k]], ".png"))
}
}
#' Multiply the ion_count and iso_abun dfs
#'
#' @inheritParams plot_abundance
#' @return df of the multiplication result
#' @export
#'
#' @examples
multiply_dfs <- function(ion_count, iso_abun){
for(i in 1:nrow(ion_count)){
# selecting corresponding Ion counts
frag_count <- ion_count[i,]
frag_count <- dplyr::select(frag_count, -c("Fragment", "Fragment_type"))
frag <- ion_count$Fragment_type[i]
# find matching isotopomer
abun_mul_loc <- which(iso_abun$Ion_type == frag)
# multiply
for(loc in abun_mul_loc){
iso_abun[loc, 2:(ncol(iso_abun)-2)] <- # TODO: remove hard coding 2 here
iso_abun[loc, 2:(ncol(iso_abun)-2)] * frag_count
}
}
iso_abun
}
#' Aggregate the iso abundance dataframes by mean and sem
#'
#' @param iso_abun
#'
#' @return
#' @export
#' @inheritParams plot_abundance
#'
#' @examples
aggregate_dfs <- function(iso_abun, group_length, total_length, offset, removed_cols){
iso_abun <- dplyr::select(iso_abun, -c("Ion", "Ion_type", "Theory"))
num_subs <- total_length/group_length
df_start_col_index <- seq(1, total_length, group_length)
if (!all(is.na(offset))) {
if (length(offset) < nrow(iso_abun)) { # offset is given as index
offset_values <- iso_abun[, offset, drop = TRUE]
} else if (length(offset) == nrow(iso_abun)){ # off set is given as values
offset_values <- offset
}
stop("Error in offset")
}
aggr_mean <- matrix(rep(0, nrow(iso_abun)*group_length),
nrow = nrow(iso_abun), ncol = group_length)
aggr_sem <- aggr_mean
# TODO: make list of removed_cols into tuples (a, b), a is repetition, b is
# exp within the repetition
for(i in 1:nrow(iso_abun)){
counter = 0
for(j in 1:group_length){
rep_index <- df_start_col_index + counter
rep_entry <- unlist(iso_abun[i, rep_index])
if (!all(is.na(offset))) rep_entry - offset_values[i]
if (!all(is.na(removed_cols))) {
check_match <- match(removed_cols, rep_index)
check_match <- check_match[!is.na(check_match)]
if (length(check_match) != 0) {
rep_entry <- rep_entry[-check_match]
}
}
aggr_mean[i, j] = mean(rep_entry)
aggr_sem[i, j] = sd(rep_entry)/sqrt(length(rep_entry))
counter = counter + 1
}
}
aggr_mean <- as.data.frame(aggr_mean)
aggr_sem <- as.data.frame(aggr_sem)
list(aggr_mean = aggr_mean, aggr_sem = aggr_sem)
}
#' Splitting strings in a list of strings by a character, and
#' taking the first component
#'
#' @param l list of strings
#' @param by character to split strings by
#'
#' @return List of strings
#' @export
#'
#' @examples
#' split_string_take_first(c("abc def", "ghi, jkl"))
split_string_take_first <- function(l, by = " "){
l_splitted <- stringr::str_split(l, by)
unlist(lapply(l_splitted, function(x) x[1]))
}
plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24, xtick = NA,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
rm(ls=list())
rm(list = ls())
#### First time run R
install.packages("devtools")
library("devtools")
library(magrittr)
load_all()
#### Create data and output folder if not exist
if (!dir.exists("data/")){
print("Add the data file to the data folder")
dir.create("data/")
}
if (!dir.exists("output/")){
dir.create("output/")
}
#### File location & processing
file_loc <- "data/Datacorrected_20231110-ET.xlsx"
ion_table_loc <- "A43:AB81"
iso_table_loc <- "A84:AC305"
ion_count <- readxl::read_xlsx(file_loc,
range = "A43:AB81")
iso_abun <- readxl::read_xlsx(file_loc,
range = "A84:AC305")
#### Check if tables are imported correctly
View(ion_count)
View(iso_abun)
#### Generate plots
xtick <- c("VC", "3NP","ApA5","DMM","TTFA","DES","Succ","U13C-VC","U13C-3NP",
"U13C-ApA5","U13C-DMM","U13C-TTFA","U13C-DES","U13C-Succ")
plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24, xtick = NA,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
load_all()
plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24, xtick = NA,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
load_all()
plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24, xtick = NA,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
load_all()
plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24, xtick = NA,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
load_all()
plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24, xtick = NA,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
load_all()
plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24, xtick = NA,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
load_all()
plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24, xtick = NA,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
xtick <- c("1", "2", "3", "4", "5", "6", "7", "8")
plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24, xtick = xtick,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
load_all()
xtick <- c("1", "2", "3", "4", "5", "6", "7", "8")
plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24, xtick = xtick,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
load_all()
plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24, xtick = xtick,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
load_all()
plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
load_all()
plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
length(1
)
load_all()
plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
load_all()
plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
load_all()
plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
hue()
?hue
??hue
hue_pal(2)
scales::hue_pal(2
)
scales::hue_pal(2)
scales::hue_pal()(4)
scales::hue_pal()(10)
show_col(hue_pal()(4))
library("scales")
show_col(hue_pal()(4))
load_all()
plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
load_all()
plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
load_all()
plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
load_all()
plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
sd <- matrix(rep(0, 9), 3, 3)
sd
sd[1,1]
sd[1,1] = c(1,2,3)
sd[1,1] = list(1,2,3)
multiplied_df
load_all()
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 14, total_length = 14*4, xtick = xtick,
removed_cols = c(58, 59), save_loc = "sep25-3.1/")
load_all()
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 14, total_length = 14*4, xtick = xtick,
removed_cols = c(58, 59), save_loc = "sep25-3.1/")
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
load_all()
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
load_all()
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
load_all()
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
load_all()
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
load_all()1
load_all()
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
load_all()
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
load_all()1
load_all()
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
load_all()
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
load_all()
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
multiplied_df
library(
"dplyr"
)
multiplied_df %>%
group_by("Ion")
data <- data.frame(
Group = c("A", "A", "B", "B", "C"),
Value1 = c(10, 20, 15, 25, 30),
Value2 = c(5, 10, 8, 12, 20)
)
print(data)
data %>% group_by(Group)
data %>%
group_by(Group)%>%
summarize(mean1 = mean(Value1)
mean2 = mean(Value2))
data %>%
group_by(Group)%>%
summarize(mean1 = mean(Value1),
mean2 = mean(Value2))
load_all()
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
load_all()
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
matrix(2,2)
matrix(2,2,2)
load_all()
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
load_all()
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(26, 27, 28), save_loc = "Nov19-1/")
dfd <- data.frame(matrix(0, 2, 2))
dfd
dfd[1,1]
dfd[1,1] = list(1,2,3)
dfd
dfd
dfd[1.1]
dfd[1,1]
dfd[1,1] = c(1,2,3)
dfd
data <- data.frame(
ID = c(1, 2, 3),
List_Column = I(list(c(10, 20, 30), c("A", "B", "C"), c(TRUE, FALSE)))
)
data
data[1,1]
data[1,2]
?I
dfd
dfd[1,1]
dfd[1,1] = I(list(1,2,3))
dfd
data
data[1,2]
data[1,2] <- list(1,2,3,4,5)
data[1,2] <- I(list(1,2,3,4,5))
data[1,2]
data
df <- data.frame(
A = c(1, 2, 3),
B = c("a", "b", "c"),
C = c("x", "y", "z")
)
df
new_list <- list(10, 20, 30)
df[1, 1] <- new_list
df
df <- data.frame(
A = c(1, 2, 3),
B = c("a", "b", "c"),
C = c("x", "y", "z")
)
df
df$A[1]
df$A[1] <- list(1,2)
df$A[1] <- list("A", "B")
df
df
as.table(df)
table(rep(0, 2,2))
as.table(matrix(0, 2, 2))
df <- as.table(matrix(0, 2, 2))
typeof(df)
df[1,1]
df[1,1] <- "A"
df
df[1,1] <- list(1,2,3)
df
load_all()
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(18, 26, 27, 28), save_loc = "Nov19-1/")
load_all()
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(18, 26, 27, 28), save_loc = "Nov19-1/")
load_all()
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(18, 26, 27, 28), save_loc = "Nov19-1/")
warning()
load_all()
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(18, 26, 27, 28), save_loc = "Nov19-1/")
load_all()
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(18, 26, 27, 28), save_loc = "Nov19-1/")
load_all()
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(18, 26, 27, 28), save_loc = "Nov19-1/")
load_all()
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(18, 26, 27, 28), save_loc = "Nov19-1/")
load_all()
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(18, 26, 27, 28), save_loc = "Nov19-1/")
load_all()
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(18, 26, 27, 28), save_loc = "Nov19-1/")
multiplied_df
View(multiplied_df)
load_all()
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(18, 26, 27, 28), save_loc = "Nov19-1/")
load_all()
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(18, 26, 27, 28), save_loc = "Nov19-1/")
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(17, 26, 27, 28), save_loc = "Nov19-1/")
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24,
removed_cols = c(17, 21, 26, 27, 28), save_loc = "Nov19-1/")
xtick <- c("10 EV", "10 Cre", "1 EV", "1 Cre", "U13C 10 EV", "U13C 10 Cre", "U13C 1 EV", "U13C 1 Cre")
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24, xtick = xtick,
removed_cols = c(17, 21, 26, 27, 28), save_loc = "Nov19-1/")
load_all()
xtick <- c("10 EV", "10 Cre", "1 EV", "1 Cre", "U13C 10 EV", "U13C 10 Cre", "U13C 1 EV", "U13C 1 Cre")
multiplied_df <- plot_abundance(ion_count, iso_abun, group_length = 8, total_length = 24, xtick = xtick,
removed_cols = c(17, 21, 26, 27, 28), save_loc = "Nov19-1/")
